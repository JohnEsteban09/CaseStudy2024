#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define FILENAME "PUPACCOUNTS.DAT"
#define MAX_TRIES 3 // Maximum of input retries

// Struct definition
typedef struct {
    char accountNumber[11];    // Account Number
    char accountName[26];      // Account Name 
    char pin[7];               // Account PIN (Changed to accommodate NULL terminator)
    double deposit;            // Initial deposit
    char transactionCode;      // B for Balance, D for Deposit, and W for Withdraw
    double amount;             // Transaction amount
    double balance;            // Account Balance
    char accountType[20];      // Account Type (savings, checking, and investment)
} Account;

// Function prototypes
void createAccounts();
void transactionProcessing();
void printRecords();
void mainMenu();
int validateAccountNumber(const char *accountNumber);
int validatePIN(const char *pin);
void clearScreen();
void clearInputBuffer();

int main() {
    while (1) {
        mainMenu();
    }
    return 0;
}

// Clear the screen function
void clearScreen() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}

// Clear input buffer
void clearInputBuffer() {
    while (getchar() != '\n');
}

// Main Menu 
void mainMenu() {
    int choice;
    printf("\n -- Welcome to PUP Bank Quezon City Branch! --\n");
    printf("\n[---- Main Menu ----]\n\n");
    printf("1. Create an Account\n");
    printf("2. Transaction Process\n");
    printf("3. Print Records\n");
    printf("4. Exit\n\n");
    printf("Please select a number: ");

    if (scanf("%d", &choice) != 1) {
        printf("Invalid input. Please select a number.\n");
        clearInputBuffer();
        return;
    }

    clearScreen(); // Clear screen before executing the chosen option

    // Selection Menu 
    switch (choice) {
        case 1:
            createAccounts();
            break;
        case 2:
            transactionProcessing();
            break;
        case 3:
            printRecords();
            break;
        case 4:
            exit(0); // Exit the program
        default:
            printf("Invalid number, please try again.\n");
    }
}

// Create Accounts
void createAccounts() {
    FILE *file = fopen(FILENAME, "ab");
    if (!file) {
        perror("Error opening file.");
        return;
    }

    printf("\n\n[---- Account Creation ----]\n\n");
    Account acc;
    while (1) {
        printf("\nEnter an account number (Must be 10 characters, type 'end' to finish): ");
        scanf("%10s", acc.accountNumber);
        if (strcmp(acc.accountNumber, "end") == 0) break;
        if (!validateAccountNumber(acc.accountNumber)) {
            printf("Invalid account number. Must be 10 characters long.\n");
            clearInputBuffer();
            continue;
        }

        printf("Enter an account name: ");
        scanf(" %25[^\n]", acc.accountName); // Read account name with spaces

        printf("Enter your PIN (up to 6 digits): ");
        scanf("%6s", acc.pin);
        if (!validatePIN(acc.pin)) {
            printf("Invalid PIN. Must be exactly 6 digits.\n");
            clearInputBuffer();
            continue;
        }        

        printf("Enter initial deposit: ");
        if (scanf("%lf", &acc.deposit) != 1) {
            printf("Invalid input. Please enter a valid deposit amount.\n");
            clearInputBuffer();
            continue;
        }

        printf("Enter account type (savings, checking, or investment): ");
        scanf(" %19s", acc.accountType); 

        acc.balance = acc.deposit;
        acc.transactionCode = 'B';
        acc.amount = 0.0;

        fwrite(&acc, sizeof(Account), 1, file);
        printf("Account created successfully.\n");
    }

    fclose(file);
    clearScreen(); // Clear screen after event
}

// Validate Account Number
int validateAccountNumber(const char *accountNumber) {
    return strlen(accountNumber) == 10;
}

// Validate PIN
int validatePIN(const char *pin) {
    return strlen(pin) == 6;
}

// Transaction Processing
void transactionProcessing() {
    FILE *file = fopen(FILENAME, "rb+");
    if (!file) {
        perror("Error opening file");
        return;
    }

    printf("\n[---- Transaction Process ----]\n");

    char accountNumber[11], pin[7];
    Account acc;
    int found = 0, tries = 0;

    printf("\nEnter account number: ");
    scanf("%10s", accountNumber);
    if (!validateAccountNumber(accountNumber)) {
        printf("Invalid account number. Must be 10 characters long.\n");
        fclose(file);
        return;
    }

    // Validate PIN
    while (tries < MAX_TRIES) {
        printf("Enter PIN: ");
        scanf("%6s", pin);
        clearInputBuffer(); // Clear the input buffer

        if (!validatePIN(pin)) {
            printf("Invalid PIN. Must be exactly 6 digits.\n");
            tries++;
            continue;
        }

        rewind(file);
        found = 0; // Reset found for each attempt
        while (fread(&acc, sizeof(Account), 1, file)) {
            if (strcmp(acc.accountNumber, accountNumber) == 0 && strcmp(acc.pin, pin) == 0) {
                printf("VALID PIN! Welcome, %s\n", acc.accountName);
                found = 1;
                break;
            }
        }

        if (found) {
            break; // Exit the while loop if the correct PIN is found
        } else {
            tries++;
            if (tries < MAX_TRIES) {
                printf("INVALID PIN! You have %d chance%s left to enter your PIN.\n", MAX_TRIES - tries, (MAX_TRIES - tries > 1) ? "s" : "");
            } else {
                printf("INVALID PIN! Card is captured! Please visit your bank branch to retrieve your card.\n");
                fclose(file);
                return;
            }
        }
    }

    if (!found) {
        // If we exit the loop without finding a valid account, close the file and return.
        fclose(file);
        return;
    }

    char transactionCode;
    double amount;

    printf("Enter transaction code (B for Balance Inquiry, D for Deposit, W for Withdrawal): ");
    scanf(" %c", &transactionCode);
    acc.transactionCode = transactionCode;

    switch (transactionCode) {
        case 'B':
            printf("Account Balance is: %.2f\n", acc.balance);

            // Prompt for receipt after balance inquiry
            char responseB;
            printf("Do you wish to print a receipt for balance inquiry? (Y/N): ");
            scanf(" %c", &responseB);
            if (responseB == 'Y' || responseB == 'y') {
                // Print receipt for balance inquiry
                printf("\n    =========== RECEIPT ===========\n");
                printf("\n    Account Number: %s\n", acc.accountNumber);
                printf("    Account Name: %s\n", acc.accountName);
                printf("\n    Transaction Type: %c\n", acc.transactionCode);
                printf("\n\n    New Balance: %.2f\n", acc.balance);
                printf("\n\n\n    Thank you for using PUPB! :)\n");
                printf("    ===============================\n\n");
            }
            break;
        case 'D':
            printf("Enter deposit amount: ");
            if (scanf("%lf", &amount) != 1) {
                printf("Invalid input. Please enter a valid deposit amount.\n");
                clearInputBuffer();
                break;
            }
            acc.amount = amount;
            acc.balance += amount;
            printf("Deposit successful. New balance is: %.2f\n", acc.balance);

            // Prompt for receipt after deposit
            char responseD;
            printf("Do you wish to print a receipt for deposit? (Y/N): ");
            scanf(" %c", &responseD);
            if (responseD == 'Y' || responseD == 'y') {
                // Print receipt for deposit
                printf("\n    =========== RECEIPT ===========\n");
                printf("\n    Account Number: %s\n", acc.accountNumber);
                printf("    Account Name: %s\n", acc.accountName);
                printf("\n    Transaction Type: %c\n", acc.transactionCode);
                printf("\n    Transaction Amount: %.2f\n", acc.amount);
                printf("\n\n    New Balance: %.2f\n", acc.balance);
                printf("\n\n\n    Thank you for using PUPB! :)\n");
                printf("    ===============================\n\n");
            }
            break;
        case 'W':
            printf("Enter withdrawal amount: ");
            if (scanf("%lf", &amount) != 1) {
                printf("Invalid input. Please enter a valid withdrawal amount.\n");
                clearInputBuffer();
                break;
            }
            if (amount < 100.00) {
                printf("Withdrawal amount must be at least 100.00.\n");
                break;
        }
            if (amount > acc.balance) {
                printf("Not enough funds. Transaction is not allowed.\n");
            } else {
                acc.amount = amount;
                acc.balance -= amount;
                printf("Withdrawal successful. New Balance is: %.2f\n", acc.balance);

                // Prompt for receipt after withdrawal
                char responseW;
                printf("Do you wish to print a receipt for withdrawal? (Y/N): ");
                scanf(" %c", &responseW);
                if (responseW == 'Y' || responseW == 'y') {
                    // Print receipt for withdrawal
                    printf("\n    =========== RECEIPT ===========\n");
                    printf("\n    Account Number: %s\n", acc.accountNumber);
                    printf("    Account Name: %s\n", acc.accountName);
                    printf("\n    Transaction Type: %c\n", acc.transactionCode);
                    printf("\n    Transaction Amount: %.2f\n", acc.amount);
                    printf("\n\n    New Balance: %.2f\n", acc.balance);
                    printf("\n\n\n    Thank you for using PUPB! :)\n");
                    printf("    ===============================\n\n");
                }
            }
            break;
        default:
            printf("Invalid transaction code.\n");
            fclose(file);
            return;
    }

    // Update the account record
    fseek(file, -sizeof(Account), SEEK_CUR);
    fwrite(&acc, sizeof(Account), 1, file);

    fclose(file);
}

// Print Records
void printRecords() {
    FILE *file = fopen(FILENAME, "rb");
    if (!file) {
        perror("Error opening file");
        return;
    }

    Account acc;
    printf("\nAccount Number    Account Name             Account Type          Account Balance\n");
    printf("-------------------------------------------------------------------------------------\n");
    while (fread(&acc, sizeof(Account), 1, file)) {
        printf("%-17s %-25s %-20s %10.2f\n", acc.accountNumber, acc.accountName, acc.accountType, acc.balance);
    }

    fclose(file);
}
