#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

//Node struct 

typedef struct Node {
    int data;
    struct Node* next;

} Node;

//Function proto (subject to change let's roll with this muna, para lang gumana at makita ko ung menu)

void createList (Node** head, int arr[], int n);
void displayList (Node* head);
void insertNum (Node** head, int data);
void delteNum (Node** head, int key);
int searchNum (Node* head, int key);
void mainMenu();

//Main
int main() {
    Node* head = NULL; 
    int choice, data, n, i;
    int listCreated = 0;

    while(1) {
        mainMenu();
        //Eto ung choices sa 1-6
            printf("\nEnter choices: ");
            scanf("%d", &choice);
     
        switch (choice){
         //Enter elements ng list    
            case 1: 
                if (listCreated){
                    printf("List already created.\n");
                } else { 
                    
            
                    printf("How many elements to insert initially? ");
                    scanf("%d", &n);
                    int arr[n];
                    printf("Enter Elements: ");
                    for ( i = 0; i < n; i++){
                    scanf("%d", &arr[i]);
                }
                    createList (&head, arr,n); 
                    listCreated = 1; 
                }
                //Iniyakan ko tong part na toh
                break;
        case 2: 
        //Pag tumuloy tuloy si ante eto lalabas
                if (!listCreated){
                    printf("Create list first.\n");
                }else {
                    displayList(head);
                }
                break;
        case 3: 
        //Add number to insert in sorted
                if (!listCreated){
                    printf("Create list first.\n");
                } else {
                    char cont = 'Y'; 
                    while (toupper(cont)=='Y'){
                        printf("Enter the number to insert: ");
                        scanf("%d", &data);
                            insertNum(&head, data);
                        printf("Do you want to insert another number? (Y/N): ");
                        scanf("%c", &cont);
                    }
                }
                break;
            case 4: 
            //Delete number
                if (!listCreated){
                     printf("Creat list first.\n");
                } else { 
                    printf("Enter the number to delete: ");
                    scanf("%d", &data);
                    delteNum(&head, data);
                }
                break;
            case 5: 
            //Search number
            if (!listCreated){
                    printf("Create list first.\n");
        } else {
                    printf("Enter the number to search: ");

        }
                break;
            case 6:
            //Exit program tapos invalid 
                    printf("Exiting the program");
            exit(0);
        default:
                printf("Invalid input. Please try again.\n");    
    }
}
return 0;

}
//Menu display 
void mainMenu(){
    printf("\nMAIN MENU\n");
    printf("\n1. Create a Linear Linked List\n");
    printf("\n2. Display a Linear Linked List\n");
    printf("\n3. Insert a number in the Linear Linked List\n");
    printf("\n4. Delete a number from the Linear Linked List\n");
    printf("\n5. Search a number\n");
    printf("\n6. Exit\n");
}

//create list 

void createList(Node **head, int arr[], int n){
    for (int i=0; i<n; i++){
        insertNum (head, arr[i]);
    }
}
//display
void displayList(Node *head){
     Node* temp = head; 
    while (temp != NULL){
        printf("%d ->", temp->data);
    }
    printf("NULL\n");
}

//insert num on sort
void insertNum(Node **head, int data){
    Node* newNode = (Node*)malloc(sizeof(Node));
    Node* current;
    newNode->data=data;
    newNode->next=NULL;

    if (*head == NULL || (*head)->data >= newNode->data){
        newNode->next = *head; 
        *head = newNode;
    } else {
        current = *head;
        while (current->next != NULL && current->next->data < newNode->data){
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;

    }

}
//delete
void delteNum(Node **head, int key){
     Node* temp = *head, *prev = NULL; 
    if (temp != NULL && temp->data == key){
        *head = temp->next;
        free(temp);
        return;
    }

     while (temp != NULL && temp->data != key){
        prev = temp;
        temp = temp->next;
     }
    
    if (temp == NULL) return; 
    free(temp);

}
//search
int searchNum(Node *head, int key){
    Node* current = head;
    while (current != NULL){
            if (current->data == key)
                return 1;
            current = current->next;
    }
    return 0;
}
